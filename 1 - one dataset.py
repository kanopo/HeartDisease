import numpy as np
import pandas as pd
import os
from sklearn.model_selection import train_test_split

"""
Ho effettuato l'encoding di una nuova features per poter rappresentare in un unico csv il fatto che i dati provengono
da 4 csv diversi:
- 0 = cleveland
- 1 = hungarian
- 2 = long-beach-va
- 3 = switzerland
"""
my_files = os.listdir("./1 - dati in csv")

encoding = 0

for file_to_merge in my_files:
    # print(file_to_merge)

    data = pd.read_csv("./1 - dati in csv/" + str(file_to_merge), header=None)

    encod = pd.DataFrame({"Place": [encoding]})
    # print(encod)

    # result = pd.concat([data, encod], axis=1, ignore_index=True)
    result = pd.merge(data, encod, how="cross", right_index=False, left_index=False)
    encoding = encoding + 1

    result.to_csv("./encoded/" + str(file_to_merge), index=False, header=False)

cleveland = pd.read_csv("./encoded/cleveland.data.csv", names=[
    "id",
    "ccf",
    "age",
    "sex",
    "painloc",
    "painexer",
    "relrest",
    "pncaden",
    "cp",
    "trestbps",
    "htn",
    "chol",
    "smoke",
    "cigs",
    "years",
    "fbs",
    "dm",
    "famhist",
    "restecg",
    "ekgmo",
    "ekgday",
    "ekgyr",
    "dig",
    "prop",
    "nitr",
    "pro",
    "diuretic",
    "proto",
    "thaldur",
    "thaltime",
    "met",
    "thalach",
    "thalrest",
    "tpeakbps",
    "tpeakbpd",
    "dummy",
    "trestbpd",
    "exang",
    "xhypo",
    "oldpeak",
    "slope",
    "rldv5",
    "rldv5e",
    "ca",
    "restckm",
    "exerckm",
    "restef",
    "restwm",
    "exeref",
    "exerwm",
    "thal",
    "thalsev",
    "thalpul",
    "earlobe",
    "cmo",
    "cday",
    "cyr",
    "num",
    "lmt",
    "ladprox",
    "laddist",
    "diag",
    "cxmain",
    "ramus",
    "om1",
    "om2",
    "rcaprox",
    "rcadist",
    "lvx1",
    "lvx2",
    "lvx3",
    "lvx4",
    "lvf",
    "cathef",
    "junk",
    "name",
    "location"


])
hungarian = pd.read_csv("./encoded/hungarian.data.csv", names=[
        "id",
    "ccf",
    "age",
    "sex",
    "painloc",
    "painexer",
    "relrest",
    "pncaden",
    "cp",
    "trestbps",
    "htn",
    "chol",
    "smoke",
    "cigs",
    "years",
    "fbs",
    "dm",
    "famhist",
    "restecg",
    "ekgmo",
    "ekgday",
    "ekgyr",
    "dig",
    "prop",
    "nitr",
    "pro",
    "diuretic",
    "proto",
    "thaldur",
    "thaltime",
    "met",
    "thalach",
    "thalrest",
    "tpeakbps",
    "tpeakbpd",
    "dummy",
    "trestbpd",
    "exang",
    "xhypo",
    "oldpeak",
    "slope",
    "rldv5",
    "rldv5e",
    "ca",
    "restckm",
    "exerckm",
    "restef",
    "restwm",
    "exeref",
    "exerwm",
    "thal",
    "thalsev",
    "thalpul",
    "earlobe",
    "cmo",
    "cday",
    "cyr",
    "num",
    "lmt",
    "ladprox",
    "laddist",
    "diag",
    "cxmain",
    "ramus",
    "om1",
    "om2",
    "rcaprox",
    "rcadist",
    "lvx1",
    "lvx2",
    "lvx3",
    "lvx4",
    "lvf",
    "cathef",
    "junk",
    "name",
    "location"


])

long_beach_va = pd.read_csv("./encoded/long-beach-va.data.csv", names=[
        "id",
    "ccf",
    "age",
    "sex",
    "painloc",
    "painexer",
    "relrest",
    "pncaden",
    "cp",
    "trestbps",
    "htn",
    "chol",
    "smoke",
    "cigs",
    "years",
    "fbs",
    "dm",
    "famhist",
    "restecg",
    "ekgmo",
    "ekgday",
    "ekgyr",
    "dig",
    "prop",
    "nitr",
    "pro",
    "diuretic",
    "proto",
    "thaldur",
    "thaltime",
    "met",
    "thalach",
    "thalrest",
    "tpeakbps",
    "tpeakbpd",
    "dummy",
    "trestbpd",
    "exang",
    "xhypo",
    "oldpeak",
    "slope",
    "rldv5",
    "rldv5e",
    "ca",
    "restckm",
    "exerckm",
    "restef",
    "restwm",
    "exeref",
    "exerwm",
    "thal",
    "thalsev",
    "thalpul",
    "earlobe",
    "cmo",
    "cday",
    "cyr",
    "num",
    "lmt",
    "ladprox",
    "laddist",
    "diag",
    "cxmain",
    "ramus",
    "om1",
    "om2",
    "rcaprox",
    "rcadist",
    "lvx1",
    "lvx2",
    "lvx3",
    "lvx4",
    "lvf",
    "cathef",
    "junk",
    "name",
    "location"


])

switzerland = pd.read_csv("./encoded/switzerland.data.csv", names=[
        "id",
    "ccf",
    "age",
    "sex",
    "painloc",
    "painexer",
    "relrest",
    "pncaden",
    "cp",
    "trestbps",
    "htn",
    "chol",
    "smoke",
    "cigs",
    "years",
    "fbs",
    "dm",
    "famhist",
    "restecg",
    "ekgmo",
    "ekgday",
    "ekgyr",
    "dig",
    "prop",
    "nitr",
    "pro",
    "diuretic",
    "proto",
    "thaldur",
    "thaltime",
    "met",
    "thalach",
    "thalrest",
    "tpeakbps",
    "tpeakbpd",
    "dummy",
    "trestbpd",
    "exang",
    "xhypo",
    "oldpeak",
    "slope",
    "rldv5",
    "rldv5e",
    "ca",
    "restckm",
    "exerckm",
    "restef",
    "restwm",
    "exeref",
    "exerwm",
    "thal",
    "thalsev",
    "thalpul",
    "earlobe",
    "cmo",
    "cday",
    "cyr",
    "num",
    "lmt",
    "ladprox",
    "laddist",
    "diag",
    "cxmain",
    "ramus",
    "om1",
    "om2",
    "rcaprox",
    "rcadist",
    "lvx1",
    "lvx2",
    "lvx3",
    "lvx4",
    "lvf",
    "cathef",
    "junk",
    "name",
    "location"


])

frames = [cleveland, hungarian, long_beach_va, switzerland]

dataset = pd.concat(frames)

dataset = dataset.replace(-9, np.nan)



y = dataset.pop("num")
X = dataset
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20)

train = pd.concat([X_train, y_train], axis=1)
test = pd.concat([X_test, y_test], axis=1)

train.to_csv("./2 - one dataset/TRAIN-dataset-heart-disease.csv", index=False)
test.to_csv("./2 - one dataset/TEST-dataset-heart-disease.csv", index=False)
